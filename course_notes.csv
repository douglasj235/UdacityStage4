Understanding Servers: |A server is both a running instance of some software capable of accepting requests from clients, and the computer such a server runs on. Servers are a model of a machine that receives requests and or provides information. Typical computing servers are database server, file server, mail server, print server, web server, gaming server, and application server. Web browsers speak to a server through http to request documents or send information.  There are two types of classifications of responses that a server will do.  Static and Dynamic.  Static is pre written files such as images that the server will return.  Dynamic requests are where the browser will interpret and process data on the fly by a program called web application.  Most content online is dynamic today.  A web application is a program that generates content that a browser can request (ex. Facebook page, blog pages, and google search results). Two commonly used methods for a request-response between a client and server are: GET and POST.  GET -- Requests data from a specified resource.  POST -- Submits data to be processed to a specified resource.
Importance of Validating Input: |Web applications are notorious for taking practically any type of input and assuming that it's valid whether it is or not, and processing it further. Not validating input is one of the greatest and most dangerous mistakes that Web-application developers can make. This can lead to system crashes, malicious database manipulation, and even database corruption. Web applications must filter incoming data. The applications must check and ensure that the data being entered fits within the parameters of what the application is expecting. If the data doesn't match, the application should generate an error and not permit the data to be entered. The first input validation of the form should be matched up with an input validation within the application to ensure that the input parameter meets the requirement. Verify the user's input. When you get an input error, render form again.  Should always include an error message.
HTML Templates and Abstraction: |HTML templates exists so one doesn't have to write redundant HTML code. Jinja2 is the template engine used to create HTML templates for this project. Templates write HTML for you to reduce redundancy. Eliminating code redundancy helps with stability.  It removes the chance that for example, you were suppose to make changes to your code in 10 places but you only made changes in 9. So if you exercised a higher level of abstraction and used Jinja2 to create all 10 HTML files, you can make a change is one place to update all 10. Ideally we want to interact with things at the highest level of abstraction that meets our needs.  This reduces code complexity and helps avoid redundancy.  Using HTML templates allows you to keep your HTML code separate from your Python code which keeps your code clean.
